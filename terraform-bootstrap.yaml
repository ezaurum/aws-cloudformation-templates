AWSTemplateFormatVersion: '2010-09-09'
Description: 'Terraform Bootstrap - S3, DynamoDB, KMS, IAM Roles for State Management'

Parameters:
  ProjectName:
    Type: String
    Default: 'terraform-bootstrap'
    Description: 'Project name for resource naming'
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: [dev, staging, prod]
    Description: 'Environment name'

Resources:
  # KMS Key - 먼저 생성되어야 S3 버킷 암호화에 사용 가능
  TerraformKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS Key for Terraform state encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowAccountRoot
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  TerraformKMSKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-${Environment}-terraform'
      TargetKeyId: !Ref TerraformKMSKey

  # S3 Bucket - Terraform 상태 저장용
  TerraformStateBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-state-${AWS::AccountId}'
      VersioningConfiguration:
        Status: 'Enabled'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !Ref TerraformKMSKey
            BucketKeyEnabled: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            NoncurrentVersionExpirationInDays: 90
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # S3 버킷 정책 - SSL/TLS 필수
  TerraformStateBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref TerraformStateBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt TerraformStateBucket.Arn
              - !Sub '${TerraformStateBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # DynamoDB 테이블 - Terraform 상태 잠금용
  TerraformStateLockTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-locks'
      AttributeDefinitions:
        - AttributeName: 'LockID'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'LockID'
          KeyType: 'HASH'
      BillingMode: 'PAY_PER_REQUEST'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # IAM 역할 - Terraform 운영자용
  TerraformOperatorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-terraform-operator'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/PowerUserAccess'
      Policies:
        - PolicyName: 'TerraformStateAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt TerraformStateBucket.Arn
                  - !Sub '${TerraformStateBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                Resource: !GetAtt TerraformStateLockTable.Arn
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource: !Ref TerraformKMSKey
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

Outputs:
  TerraformStateBucketName:
    Description: 'S3 Bucket name for Terraform state'
    Value: !Ref TerraformStateBucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-StateBucket'

  TerraformLockTableName:
    Description: 'DynamoDB table name for state locking'
    Value: !Ref TerraformStateLockTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-LockTable'

  TerraformOperatorRoleArn:
    Description: 'ARN of the Terraform operator role'
    Value: !GetAtt TerraformOperatorRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-OperatorRoleArn'

  KMSKeyId:
    Description: 'KMS Key ID for Terraform state encryption'
    Value: !Ref TerraformKMSKey
    Export:
      Name: !Sub '${ProjectName}-${Environment}-KmsKeyId'

  KMSKeyArn:
    Description: 'KMS Key ARN for Terraform state encryption'
    Value: !GetAtt TerraformKMSKey.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-KmsKeyArn'

